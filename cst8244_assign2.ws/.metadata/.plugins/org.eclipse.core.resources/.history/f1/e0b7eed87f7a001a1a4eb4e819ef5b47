#include <stdlib.h>
#include <stdio.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <errno.h>
#include <time.h>
#include <sys/netmgr.h>
#include <sys/neutrino.h>

#define ATTACH_POINT "metronome"
#define METRONOME_PULSE_CODE _PULSE_CODE_MINAVAIL
#define PAUSE_PULSE (METRONOME_PULSE_CODE + 1)
#define SIZE_OF_T 8
#define QUIT_PULSE (METRONOME_PULSE_CODE + 2)

char data[255];
typedef union {
	struct _pulse pulse;
	char msg[255];
} my_message_t;

int beatPerMinute;
int time_sig_top;
int time_sig_bottom;

struct DataTableRow {
	int time_sig_top;
	int time_sig_bottom;
	int interval_per_beat;
	char * interval;
}typedef DataTableRow;

DataTableRow t[SIZE_OF_T] = { { 2, 4, 4, "|1&2&" }, { 3, 4, 6, "|1&2&3&" }, { 4,
		4, 8, "|1&2&3&4&" }, { 5, 4, 10, "|1&2&3&4-5-" },
		{ 3, 8, 6, "|1-2-3-" }, { 6, 8, 6, "|1&a2&a" },
		{ 9, 8, 9, "|1&a2&a3&a" }, { 12, 8, 12, "|1&a2&a3&a4&a" } };

void metronome_thread() {
	//http://www.qnx.com/developers/docs/6.5.0/index.jsp?topic=%2Fcom.qnx.doc.neutrino_lib_ref%2Ft%2Ftimer_create.html
	struct sigevent event;
	struct itimerspec itime;
	timer_t timer_id;
	name_attach_t * attach;
	int rcvid;
	int i;
	my_message_t msg;
	if ((attach = name_attach(NULL, ATTACH_POINT, 0)) == NULL) {
		exit(EXIT_FAILURE);
	}

	event.sigev_notify = SIGEV_PULSE;
	event.sigev_coid = ConnectAttach(ND_LOCAL_NODE, 0, attach->chid,
	_NTO_SIDE_CHANNEL, 0);
	//If pid is zero, the current process is used to look up a nonzero tid. If pid and tid are zero, then the calling thread is used
	event.sigev_priority = SchedGet(0, 0, NULL);
	;
	event.sigev_code = METRONOME_PULSE_CODE;

	timer_create(CLOCK_REALTIME, &event, &timer_id);

	double beatPerSec = 60.0 / beatPerMinute;
	double measure = beatPerSec * time_sig_top;
	double interval = -1;
	for (i = 0; i < SIZE_OF_T; i++) {
		if (t[i].time_sig_top == time_sig_top
				&& t[i].time_sig_bottom == time_sig_bottom) {
			interval = measure / t[i].interval_per_beat;
			break;
		}
	}
	if (interval == -1) {
		printf("no data");
		exit(EXIT_FAILURE);
	}

	itime.it_interval.tv_sec = interval;
	itime.it_interval.tv_nsec = ((interval - (int) interval) * 1e+9);
	timer_settime(timer_id, 0, &itime, NULL);

	char *index = t[i].interval;
	for (;;) {
		rcvid = MsgReceivePulse(attach->chid, &msg, sizeof(msg), NULL);
		if (rcvid == 0) {
			switch (msg.pulse.code) {
			case METRONOME_PULSE_CODE:
				//if at the start print twice
				if (*index == '|') {
					printf("%c", *index++);
					printf("%c", *index++);
					//if at the end reset
				} else if (*index == '\0') {
					printf("\n");
					fflush(stdout);
					index = t[i].interval;
					//if at the middle print
				} else {
					printf("%c", *index++);
				}
				break;
			case PAUSE_PULSE:
				//TODO: pause the timer http://www.qnx.com/developers/docs/7.0.0/index.html#com.qnx.doc.neutrino.lib_ref/topic/p/pause.html
//				alarm(atoi(msg.msg));
//				pause();
				break;
			case QUIT_PULSE:
				printf("Quit");
				timer_delete(timer_id);
				exit(EXIT_SUCCESS);
				break;
			}
		}
	}
}

int io_read(resmgr_context_t *ctp, io_read_t *msg, RESMGR_OCB_T *ocb) {
int nb;

	if (data == NULL)
		return 0;

	nb = strlen(data);

	//test to see if we have already sent the whole message.
	if (ocb->offset == nb)
		return 0;

	//We will return which ever is smaller the size of our data or the size of the buffer
	nb = min(nb, msg->i.nbytes);

	//Set the number of bytes we will return
	_IO_SET_READ_NBYTES(ctp, nb);

	//Copy data into reply buffer.
	SETIOV(ctp->iov, data, nb);

	//update offset into our data used to determine start position for next read.
	ocb->offset += nb;

	//If we are going to send any bytes update the access time for this resource.
	if (nb > 0)
		ocb->attr->flags |= IOFUNC_ATTR_ATIME;

	return (_RESMGR_NPARTS(1));


int main() {

}
