#include <stdlib.h>
#include <stdio.h>
#include <sys/iofunc.h>
#include <sys/dispatch.h>
#include <string.h>
#include <unistd.h>
#include <sys/types.h>
#include <errno.h>
#include <time.h>
#include <sys/netmgr.h>
#include <sys/neutrino.h>


#define ATTACH_POINT "metronome"
#define METRONOME_PULSE_CODE _PULSE_CODE_MINAVAIL
#define PAUSE_PULSE (METRONOME_PULSE_CODE + 1)
#define SIZE_OF_T 8
#define my_QUIT_PULSE (METRONOME_PULSE_CODE + 2)

char data[255];
typedef union {
	struct _pulse pulse;
	char msg[255];
} my_message_t;

int beatPerMinute;
int time_sig_top;
int time_sig_bottom;

struct DataTableRow {
	int time_sig_top;
	int time_sig_bottom;
	int interval_per_beat;
	char * interval;
}typedef DataTableRow;

DataTableRow t[SIZE_OF_T] = {
		{ 2, 4, 4, "|1&2&" },
		{ 3, 4, 6, "|1&2&3&" },
		{ 4, 4, 8, "|1&2&3&4&" },
		{ 5, 4, 10, "|1&2&3&4-5-" },
		{ 3, 8, 6, "|1-2-3-" },
		{ 6, 8, 6, "|1&a2&a" },
		{ 9, 8, 9, "|1&a2&a3&a" },
		{ 12, 8, 12, "|1&a2&a3&a4&a" }
};

void metronome_thread() {
	//http://www.qnx.com/developers/docs/6.5.0/index.jsp?topic=%2Fcom.qnx.doc.neutrino_lib_ref%2Ft%2Ftimer_create.html
	struct sigevent event;
	struct itimerspec itime;
	timer_t timer_id;
	name_attach_t * attach;
	int rcvid;
	my_message_t msg;
	if ((attach = name_attach(NULL, ATTACH_POINT, 0)) == NULL) {
		exit(EXIT_FAILURE);
	}

	event.sigev_notify = SIGEV_PULSE;
	event.sigev_coid = ConnectAttach(ND_LOCAL_NODE, 0, attach->chid, _NTO_SIDE_CHANNEL,
			0);
	//If pid is zero, the current process is used to look up a nonzero tid. If pid and tid are zero, then the calling thread is used
	event.sigev_priority = SchedGet(0,0,NULL);;
	event.sigev_code = METRONOME_PULSE_CODE;

	timer_create(CLOCK_REALTIME, &event, &timer_id);

	double beatPerSec = 60.0 / beatPerMinute;
	double measure = beatPerSec * time_sig_top;
	double interval = -1;
	for(int i =0; i < SIZE_OF_T; i++){
		if(t[i].time_sig_top == time_sig_top && t[i].time_sig_bottom == time_sig_bottom){
			interval = measure/t[i].interval_per_beat;
			break;
		}
	}
	if(interval == -1){
		printf("no data");
		exit(EXIT_FAILURE);
	}

	for(;;){
		rcvid = MsgReceivePulse(attach->chid, &msg, sizeof(msg), NULL);
		if(rcvid == 0){
			switch(msg.pulse.code){
			case METRONOME_PULSE_CODE:


				break;
			case PAUSE_PULSE:

				break;

			case QUIT_PULSE:

			}
		}
	}

}

int main(){

}
